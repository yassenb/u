// Generated by CoffeeScript 1.6.2
(function() {
  var tokenDefs;

  tokenDefs = [['-', /^\s+/], ['-', /^"[^a-z\{].*/i], ['-', /^"\{.*(?:\s*(?:"|"[^\}].*|[^"].*)[\n\r]+)*"\}.*/], ['number', /^\d+/], ['', /^(?:==|\?\{|@\{|::|\+\+|[\(\)\[\]\{\};_])/], ['name', /^[a-z][a-z0-9]*/i], ['name', /^\$(f|t|pinf|ninf|e|pi|np)?/], ['name', /^(?:<:|>:|\|:|=>|\|\||<=|>=|<>|,,|>>|<<|%%)/], ['name', /^[\+\-\*:\^=<>\/\\\.\#!%~\|,&]/]];

  this.tokenize = function(code, opts) {
    var col, line;

    if (opts == null) {
      opts = {};
    }
    line = col = 1;
    return {
      next: function() {
        var a, m, re, startCol, startLine, t, type, _i, _len, _ref;

        while (true) {
          if (!code) {
            return {
              type: 'eof',
              value: '',
              startLine: line,
              startCol: col,
              endLine: line,
              endCol: col
            };
          }
          startLine = line;
          startCol = col;
          type = null;
          for (_i = 0, _len = tokenDefs.length; _i < _len; _i++) {
            _ref = tokenDefs[_i], t = _ref[0], re = _ref[1];
            if (!(m = code.match(re))) {
              continue;
            }
            type = t || m[0];
            break;
          }
          if (!type) {
            throw Error(("Syntax error: unrecognized token at " + line + ":" + col + " ") + code, {
              file: opts.file,
              line: line,
              col: col,
              code: opts.code
            });
          }
          a = m[0].split('\n');
          line += a.length - 1;
          col = (a.length === 1 ? col : 1) + a[a.length - 1].length;
          code = code.substring(m[0].length);
          if (type !== '-') {
            return {
              type: type,
              value: m[0],
              startLine: startLine,
              startCol: startCol,
              endLine: line,
              endCol: col
            };
          }
        }
      }
    };
  };

}).call(this);
