// Generated by CoffeeScript 1.6.2
(function() {
  var compile, parse, renderJS, stdlib;

  parse = require('./parser').parse;

  stdlib = require('./stdlib');

  this.exec = function(uCode) {
    console.info('uCode', uCode);
    console.info('stdlib', stdlib);
    return (new Function("console.info('a0', arguments[0]);\nvar ctx = arguments[0];\nreturn " + (compile(uCode)) + ";"))(stdlib);
  };

  this.compile = compile = function(uCode) {
    return renderJS(parse(uCode));
  };

  renderJS = function(node) {
    var alternative, child, condition, consequence, i, local, name, r, tokenType, _i, _len, _ref, _ref1, _ref2;

    switch (node[0]) {
      case 'number':
        return node[1];
      case 'name':
        name = node[1];
        if (/^[a-z_\$][a-z0-9_\$]*$/i.test(name)) {
          return "ctx." + name;
        } else {
          return "ctx[" + (JSON.stringify(name)) + "]";
        }
        break;
      case 'expression':
        r = renderJS(node[1]);
        i = 2;
        while (i < node.length) {
          r = "(" + (renderJS(node[i])) + ")([" + r + "].concat(" + (renderJS(node[i + 1])) + "))";
          i += 2;
        }
        return r;
      case 'sequence':
        return '[' + ((function() {
          var _i, _len, _ref, _results;

          _ref = node.slice(1);
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            _results.push(renderJS(child));
          }
          return _results;
        })()).join(',') + ']';
      case 'conditional':
        r = '';
        _ref = node.slice(1, -2);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          _ref1 = _ref[_i], tokenType = _ref1[0], condition = _ref1[1], consequence = _ref1[2];
          if (tokenType !== '::') {
            throw Error('Compiler error: expected "::" token as a child of "conditional", but found ' + JSON.stringify(tokenType));
          }
          r += "(" + (renderJS(condition)) + ")?(" + (renderJS(consequence)) + "):";
        }
        _ref2 = node.slice(-2), alternative = _ref2[0], local = _ref2[1];
        r += alternative ? renderJS(alternative) : '$';
        if (local) {
          throw Error('Not implemented: local clause within conditional');
        }
        return r;
      default:
        throw Error('Compiler error: Unrecognised node type, ' + node[0]);
    }
  };

}).call(this);
